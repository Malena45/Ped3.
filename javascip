const courses = [
  {
    "id": "COMUNICACION_ORAL_Y_ESCRITA_I",
    "name": "COMUNICACION ORAL Y ESCRITA I",
    "level": 1,
    "credits": 2.0,
    "prerequisites": []
  },
  {
    "id": "APRENDIZAJE_DEL_INGLES_A_TRAVES_DE_CONTEXTOS_CULTURALES",
    "name": "APRENDIZAJE DEL INGLES A TRAVES DE CONTEXTOS CULTURALES",
    "level": 1,
    "credits": 6.0,
    "prerequisites": []
  },
  {
    "id": "PROCESOS_DE_APRENDIZAJE_DEL_ADOLESCENTE",
    "name": "PROCESOS DE APRENDIZAJE DEL ADOLESCENTE",
    "level": 1,
    "credits": 4.0,
    "prerequisites": []
  },
  {
    "id": "IDENTIDAD_PROFESIONAL_DOCENTE",
    "name": "IDENTIDAD PROFESIONAL DOCENTE",
    "level": 1,
    "credits": 4.0,
    "prerequisites": []
  },
  {
    "id": "ELEMENTOS_DE_MATEMATICA_BASICA",
    "name": "ELEMENTOS DE MATEMATICA BASICA",
    "level": 1,
    "credits": 4.0,
    "prerequisites": []
  },
  {
    "id": "ALGEBRA_I",
    "name": "ALGEBRA I",
    "level": 1,
    "credits": 5.0,
    "prerequisites": []
  },
  {
    "id": "FISICA_GENERAL_I",
    "name": "FISICA GENERAL I",
    "level": 1,
    "credits": 5.0,
    "prerequisites": []
  },
  // ... AQUI VAN TODAS LAS MATERIAS DESDE EL SEMESTRE 2 AL 10 ...
  {
    "id": "PRACTICA_PROFESIONAL",
    "name": "PRACTICA PROFESIONAL",
    "level": 10,
    "credits": 29.0,
    "prerequisites": []
  }
];

const nodes = courses.map(c => {
  return {
    id: c.id,
    name: c.name,
    level: c.level,
    credits: c.credits
  };
});

const links = [];
courses.forEach(course => {
  course.prerequisites.forEach(pr => {
    links.push({ source: pr, target: course.id });
  });
});

const svg = d3.select("#graph").append("svg")
  .attr("width", 3500)
  .attr("height", 1200);

svg.append("defs").append("marker")
  .attr("id", "arrow")
  .attr("viewBox", "0 -5 10 10")
  .attr("refX", 15)
  .attr("refY", 0)
  .attr("markerWidth", 6)
  .attr("markerHeight", 6)
  .attr("orient", "auto")
  .append("path")
  .attr("d", "M0,-5L10,0L0,5")
  .attr("fill", "#663399");

const levelSpacing = 250;
const verticalSpacing = 90;
const levelMap = new Map();

nodes.forEach(node => {
  if (!levelMap.has(node.level)) {
    levelMap.set(node.level, []);
  }
  levelMap.get(node.level).push(node);
});

levelMap.forEach((nlist, level) => {
  nlist.forEach((n, i) => {
    n.x = level * levelSpacing;
    n.y = i * verticalSpacing + 60;
  });
});

const link = svg.append("g")
  .selectAll("line")
  .data(links)
  .enter().append("line")
  .attr("stroke", "#663399")
  .attr("stroke-width", 2)
  .attr("marker-end", "url(#arrow)");

const node = svg.append("g")
  .selectAll("g")
  .data(nodes)
  .enter().append("g")
  .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

node.append("rect")
  .attr("width", 200)
  .attr("height", 40)
  .attr("fill", "#8e44ad")
  .attr("stroke", "#fff")
  .attr("rx", 10)
  .attr("ry", 10);

node.append("text")
  .attr("x", 100)
  .attr("y", 25)
  .attr("text-anchor", "middle")
  .attr("fill", "#fff")
  .attr("font-size", "10px")
  .text(function(d) { return d.name; });

link
  .attr("x1", function(d) { return nodes.find(n => n.id === d.source).x + 100; })
  .attr("y1", function(d) { return nodes.find(n => n.id === d.source).y + 20; })
  .attr("x2", function(d) { return nodes.find(n => n.id === d.target).x + 100; })
  .attr("y2", function(d) { return nodes.find(n => n.id === d.target).y + 20; });
